## Принципы разработки алгоритмов.


### Вопросы

1. Какие принципы лежат в основе разработки алгоритмов? (пошаговость, модульность, ясность и т.д.). Объясните каждый принцип.
2. Почему важно соблюдать принцип &laquo;от простого к сложному&raquo; при составлении юридических инструкций?
3. Как принцип &laquo;модульности&raquo; может быть применён при разработке алгоритма юридического аудита?
4. Какие ошибки чаще всего допускаются при разработке юридических алгоритмов?


### Задачи

**1. Принцип поэтапной детализации (&laquo;сверху–вниз&raquo;) **

Вам поручено разработать алгоритм рассмотрения жалобы на действия судебного пристава.

Задание:

- На первом уровне (&laquo;сверху&raquo;) выделите 3–4 крупных этапа процесса (например: приём жалобы, проверка, принятие решения, уведомление).
- Выберите один из этапов и выполните его детализацию на 2–3 подшага.
- Объясните, почему такой подход (от общего к частному) удобен при составлении административных регламентов.


**2. Принцип &laquo;от главного к второстепенному&raquo; **

Вы участвуете в разработке алгоритма признания гражданина недееспособным. Главное событие в этом процессе &mdash; подача заявления в суд.

- Начните с главного шага &mdash; &laquo;Подать заявление в суд о признании гражданина недееспособным&raquo;.
- &laquo;Достройте&raquo; алгоритм назад: какие действия должны быть выполнены до этого шага? (например: получение медицинского заключения, сбор документов).
- &laquo;Достройте&raquo; алгоритм вперёд: что происходит после подачи заявления?
- Обоснуйте, почему такой подход помогает избежать упущений в сложных юридических процедурах.


**3. Комплексное применение принципов**

Разработайте алгоритм подачи заявления о защите прав потребителей (например, возврат некачественного товара).

- Используйте поэтапную детализацию: сначала общие блоки (до суда / в суд), затем детализируйте один из них.
- Примените подход &laquo;от главного к второстепенному&raquo;: начните с ключевого события (например, &laquo;направление претензии продавцу&raquo;) и достройте в обе стороны.
- Постройте алгоритм только из типовых конструкций &mdash; без &laquo;прыжков&raquo; или возвратов.

Оформите результат в виде нумерованного списка или простой блок-схемы (в текстовом виде).

**4. Анализ ошибок в неструктурированном алгоритме**

Пример &laquo;плохого&raquo; алгоритма (из реальной инструкции):

&laquo;Проверить документы. Если всё в порядке &mdash; выдать справку. Если нет &mdash; запросить недостающее. Если запрос не выполнен за 3 дня &mdash; отказать. Но если заявитель позвонит &mdash; продлить срок. Если продление уже было &mdash; вернуться к проверке&raquo;.

- Укажите, какие принципы разработки алгоритма нарушены.
- Почему такой алгоритм трудно исполнять должностному лицу и непредсказуем для гражданина?
- Перепишите его в структурированной форме, убрав &laquo;возвраты&raquo; и сделав логику прозрачной.
